[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "N",  # pep8-naming
    "F",  # pyflakes
    "I",  # isort
    "G20", # flake8-logging-format rules
    "LOG", # flake8-logging rules, most of them autofixable
    "TID25", # flake8-tidy-imports rules
    "DJ",  # flake8-django
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "C9", # pycodestyle errors
    "Q",  # flake8-quotes
    "RET", # flake8-return
    "PTH", # flake8-pathlib
    "FIX", # flake8-fixme
    "TD", # flake8-todo
    "R", # flake8-requirements
    "PT", # flake8-pytest-style
    "SIM", # flake8-simplify
    "RUF006", # Checks for asyncio dangling task
    "RUF015", # Checks for unnecessary iterable allocation for first element
    "RUF019", # Checks for unnecessary key check
    "RUF100", # Unused noqa (auto-fixable)
    "ASYNC", # subset of flake8-async rules
    
]
line-length = 130
unsafe-fixes = true # fix all errors that can be fixed automatically

[tool.ruff.lint]
fixable=["ALL"]
# unfixable = ["F401"]  # Ignore unused imports
ignore = ["TD003", "RET505", "E501", "B904"]

[tool.ruff.format]
exclude = ["migrations", "settings.py", "wsgi.py", "asgi.py", "manage.py", "conftest.py", "tests"]
docstring-code-format = true


[tool.ruff.per-file-ignores]
# ignore unused imports in __init__.py files

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 15 

[tool.ruff.isort]
known-third-party = ["django", "celery"]

known-first-party = ["cost_control", "cloud_driver", "data_warehouse", "common", "cmdb_api", "third_party_api", "enhanced_cmdb"]

[tool.codespell]
skip = '*.po,*.ts,./src/3rdParty,./src/Test'
count = true
quiet-level = 3
